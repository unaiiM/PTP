            /* Https proxy:
            let req : http.ClientRequest;
            let timeoutId : NodeJS.Timeout = setTimeout(() => {
                if(req) req.destroy();
            }, this.ProxyMaxTimeout);

            const options : https.RequestOptions = {
                host: proxy.ip, 
                port: proxy.port,
                path: 'https://example.com/',
                method: 'GET',
                rejectUnauthorized: false
            };

            req = https.request(options, (res : http.IncomingMessage) => {
                clearTimeout(timeoutId);
                console.log("Response from proxy " + res.statusCode);

                let valid : boolean = res.statusCode === 200;
                resolv(valid);
                if(cb) cb(valid);
            });

            req.on("error", (err : Error) => {
                console.log(err);
                if(cb) cb(false);
                resolv(false);
            });
            req.end();*/


            import { SocksClient, SocksClientOptions, SocksClientChainOptions } from 'socks';
import * as tls from "tls";
import HttpHandler, { RequestOptions } from "./../ptp/lib/http-handler.js";

const socksOptions : SocksClientOptions = {
    proxy: {
      host: "98.178.72.21",
      port: 10919,
      type: 5
    },
  
    command: 'connect',
  
    destination: {
      host: 'example.com',
      port: 443
    }
};

try {
    SocksClient.createConnection(socksOptions).then((info) => {
        const tlsSocket = tls.connect({ socket: info.socket, rejectUnauthorized: false }, () => {
            console.log("TLS connection done!");

            const options : RequestOptions = {
                method: "GET",
                path: "/",
                version: "HTTP/1.1",
                headers: {
                    "Host": "example.com",
                    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0",
                    "Accept": "*/*",
                },
            };
            const handler : HttpHandler = new HttpHandler(tlsSocket);
            handler.request(options);
        });

        tlsSocket.on('secured', (cleartextStream) => {
            const negotiatedProtocol = cleartextStream.alpnProtocol;
            console.log('Negotiated protocol:', negotiatedProtocol);
          
            // Now you can use the 'cleartextStream' for secure communication
            cleartextStream.write('Hello, server!\n');
          });
    });
} catch (err) {
    // Handle errors
}